public class batchclass implements Database.Batchable<Course__c>{
public Itreable<Course__c> start(Database.BatchableContext bc){
 List<Course__c>course = [Select id, name from Course__c];
   return Course; 
}
public void execute(Database.BatckableContext bc, List<Course__c>courses){
for(Course__c cou = courses){
cou.name = 'New' + cou.name;
update courses;
}
public void finish(Database.BatchableContext bc){
}
}
................................................
public class OppBatchClass implements Database.Batchable<sObject>,Database.Stateful {
    public Database.QueryLocator start(Database.BatchableContext bc){
        String str = 'Select id, name, StageName, CloseDate from Opportunity ';
        return Database.getQueryLocator(str);
       }
    public void execute(Database.BatchableContext bc, List<Opportunity> Opps){
        List<Opportunity> opplist = new List<Opportunity>();
        for(Opportunity op : opplist){
            
            if(op.StageName == 'Closed Lost'){
               op.CloseDate = System.TODAY();
                opplist.add(op);
               }
            delete opplist;
        }
    }
    public void finish(Database.BatchableContext bc){
        System.debug('Opportunity are deleted');
    }
}
............................................................
public class MyTimeclass Implements Schedulable{
public void execute(SchedulableContext sc){
 List<Doctor__c>doctlist = new List<Doctor__c>();
  Doctor__c doc = new Doctor__c();
    doc.Name = 'xyz';
    doctlist.add(doc);
}
insert doctlist;
}
.....................................................
public class Myqueueclass implements Queueable{
public void execute(QueueableContext qc){
List<Doctor__c>doct = [Select id, Name, Fee__c from Doctor__c];
    for(Doctor__c doc : doct){
    doc.Fee__c += 12;
}
update doct;
}
}